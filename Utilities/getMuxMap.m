function [MuxMap, muxLength] = getMuxMap(probeName)
% Provide hard-coded mapping of which bit of which byte in the HVMux
% programming table should be set to turn on the HVMux switch for that
% element.
% The returned "MuxMap" variable is an N X 2 Matlab array of doubles, where N is the
% number of elements in the probe.  The two values in a row identify which
% byte (first value) and which bit of that byte (second value) to set to
% select the associated element.  These values count from one, not zero.
% If an element is selected without setting any bit in the HVMux
% programming table, both entries in "MuxMap" for that element will be
% zero.
% The returned value "muxLength" is a scalar Matlab double set to the
% required length in bytes of the HVMux programming table; typically this
% value will match the largest value in the first column of MuxMap.
%
% The input argument "probName" must be set to a string with the exact same
% spelling as the probe name used in computeTrans.

% Revised May 2020 for VTS-343, to allow mux table lengths of 256 instead
% of the earlier limit of 255.  (old VDAS Aperture field in Trans.HVMux has
% been replaced with SHIAperture)
% Note that SHIAperture is a Matlab double; the old VDASAperture was a
% Matlab uint8!!

switch probeName
    case 'L10-5'
        MuxMap = [016 1; 014 1; 012 1; 010 1; 016 2; 014 2; 012 2; 010 2; ...
                  016 3; 014 3; 012 3; 010 3; 016 4; 014 4; 012 4; 010 4; ...
                  008 1; 006 1; 004 1; 002 1; 008 2; 006 2; 004 2; 002 2; ...
                  008 3; 006 3; 004 3; 002 3; 008 4; 006 4; 004 4; 002 4; ...
                  016 5; 014 5; 012 5; 010 5; 016 6; 014 6; 012 6; 010 6; ...
                  016 7; 014 7; 012 7; 010 7; 016 8; 014 8; 012 8; 010 8; ...
                  008 5; 006 5; 004 5; 002 5; 008 6; 006 6; 004 6; 002 6; ...
                  008 7; 006 7; 004 7; 002 7; 008 8; 006 8; 004 8; 002 8; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  015 1; 013 1; 011 1; 009 1; 015 2; 013 2; 011 2; 009 2; ...
                  015 3; 013 3; 011 3; 009 3; 015 4; 013 4; 011 4; 009 4; ...
                  007 1; 005 1; 003 1; 001 1; 007 2; 005 2; 003 2; 001 2; ...
                  007 3; 005 3; 003 3; 001 3; 007 4; 005 4; 003 4; 001 4; ...
                  015 5; 013 5; 011 5; 009 5; 015 6; 013 6; 011 6; 009 6; ...
                  015 7; 013 7; 011 7; 009 7; 015 8; 013 8; 011 8; 009 8; ...
                  007 5; 005 5; 003 5; 001 5; 007 6; 005 6; 003 6; 001 6; ...
                  007 7; 005 7; 003 7; 001 7; 007 8; 005 8; 003 8; 001 8];

        muxLength = 16;

    case 'L12-3v'
        MuxMap = [013 1; 019 2; 028 2; 030 2; 029 2; 012 1; 014 1; 021 2; ...
                  032 2; 031 2; 017 2; 020 2; 022 2; 023 2; 025 2; 018 2; ...
                  029 1; 028 1; 030 1; 024 2; 026 2; 027 2; 031 1; 017 1; ...
                  032 1; 015 1; 001 1; 016 1; 019 1; 018 1; 020 1; 003 1; ...
                  005 1; 002 1; 004 1; 021 1; 023 1; 022 1; 024 1; 007 1; ...
                  009 1; 006 1; 025 1; 027 1; 026 1; 011 1; 008 1; 010 1; ...
                  013 2; 012 2; 014 2; 006 2; 008 2; 005 2; 007 2; 015 2; ...
                  001 2; 016 2; 002 2; 010 2; 009 2; 011 2; 003 2; 004 2; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  013 3; 019 4; 028 4; 030 4; 029 4; 012 3; 014 3; 021 4; ...
                  032 4; 031 4; 017 4; 020 4; 022 4; 023 4; 025 4; 018 4; ...
                  029 3; 028 3; 030 3; 024 4; 026 4; 027 4; 031 3; 017 3; ...
                  032 3; 015 3; 001 3; 016 3; 019 3; 018 3; 020 3; 003 3; ...
                  005 3; 002 3; 004 3; 021 3; 023 3; 022 3; 024 3; 007 3; ...
                  009 3; 006 3; 025 3; 027 3; 026 3; 011 3; 008 3; 010 3; ...
                  013 4; 012 4; 014 4; 006 4; 008 4; 005 4; 007 4; 015 4; ...
                  001 4; 016 4; 002 4; 010 4; 009 4; 011 4; 003 4; 004 4];

        muxLength = 32;

    case 'L12-5 38mm'
        MuxMap = [016 5; 001 4; 014 5; 003 4; 012 5; 005 4; 010 5; 007 4; ...
                  008 5; 009 4; 006 5; 011 4; 004 5; 013 4; 002 5; 015 4; ...
                  016 6; 001 3; 014 6; 003 3; 012 6; 005 3; 010 6; 007 3; ...
                  008 6; 009 3; 006 6; 011 3; 004 6; 013 3; 002 6; 015 3; ...
                  016 7; 001 2; 014 7; 003 2; 012 7; 005 2; 010 7; 007 2; ...
                  008 7; 009 2; 006 7; 011 2; 004 7; 013 2; 002 7; 015 2; ...
                  016 8; 001 1; 014 8; 003 1; 012 8; 005 1; 010 8; 007 1; ...
                  008 8; 009 1; 006 8; 011 1; 004 8; 013 1; 002 8; 015 1; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; 000 0; ...
                  015 5; 002 4; 013 5; 004 4; 011 5; 006 4; 009 5; 008 4; ...
                  007 5; 010 4; 005 5; 012 4; 003 5; 014 4; 001 5; 016 4; ...
                  015 6; 002 3; 013 6; 004 3; 011 6; 006 3; 009 6; 008 3; ...
                  007 6; 010 3; 005 6; 012 3; 003 6; 014 3; 001 6; 016 3; ...
                  015 7; 002 2; 013 7; 004 2; 011 7; 006 2; 009 7; 008 2; ...
                  007 7; 010 2; 005 7; 012 2; 003 7; 014 2; 001 7; 016 2; ...
                  015 8; 002 1; 013 8; 004 1; 011 8; 006 1; 009 8; 008 1; ...
                  007 8; 010 1; 005 8; 012 1; 003 8; 014 1; 001 8; 016 1];

        muxLength = 16;

    case 'L12-5 50mm'
        MuxMap = [016 5; 001 0; 015 5; 002 0; 014 5; 003 0; 013 5; 004 0; ...
                  012 5; 005 0; 011 5; 006 0; 010 5; 007 0; 009 5; 008 0; ...
                  008 5; 009 0; 007 5; 010 0; 006 5; 011 0; 005 5; 012 0; ...
                  004 5; 013 0; 003 5; 014 0; 002 5; 015 0; 001 5; 016 0; ...
                  016 6; 001 0; 015 6; 002 0; 014 6; 003 0; 013 6; 004 0; ...
                  012 6; 005 0; 011 6; 006 0; 010 6; 007 0; 009 6; 008 0; ...
                  008 6; 009 0; 007 6; 010 0; 006 6; 011 0; 005 6; 012 0; ...
                  004 6; 013 0; 003 6; 014 0; 002 6; 015 0; 001 6; 016 0; ...
                  016 7; 001 0; 015 7; 002 0; 014 7; 003 0; 013 7; 004 0; ...
                  012 7; 005 0; 011 7; 006 0; 010 7; 007 0; 009 7; 008 0; ...
                  008 7; 009 0; 007 7; 010 0; 006 7; 011 0; 005 7; 012 0; ...
                  004 7; 013 0; 003 7; 014 0; 002 7; 015 0; 001 7; 016 0; ...
                  016 8; 001 0; 015 8; 002 0; 014 8; 003 0; 013 8; 004 0; ...
                  012 8; 005 0; 011 8; 006 0; 010 8; 007 0; 009 8; 008 0; ...
                  008 8; 009 0; 007 8; 010 0; 006 8; 011 0; 005 8; 012 0; ...
                  004 8; 013 0; 003 8; 014 0; 002 8; 015 0; 001 8; 016 0; ...
                  016 0; 001 4; 015 0; 002 4; 014 0; 003 4; 013 0; 004 4; ...
                  012 0; 005 4; 011 0; 006 4; 010 0; 007 4; 009 0; 008 4; ...
                  008 0; 009 4; 007 0; 010 4; 006 0; 011 4; 005 0; 012 4; ...
                  004 0; 013 4; 003 0; 014 4; 002 0; 015 4; 001 0; 016 4; ...
                  016 0; 001 3; 015 0; 002 3; 014 0; 003 3; 013 0; 004 3; ...
                  012 0; 005 3; 011 0; 006 3; 010 0; 007 3; 009 0; 008 3; ...
                  008 0; 009 3; 007 0; 010 3; 006 0; 011 3; 005 0; 012 3; ...
                  004 0; 013 3; 003 0; 014 3; 002 0; 015 3; 001 0; 016 3; ...
                  016 0; 001 2; 015 0; 002 2; 014 0; 003 2; 013 0; 004 2; ...
                  012 0; 005 2; 011 0; 006 2; 010 0; 007 2; 009 0; 008 2; ...
                  008 0; 009 2; 007 0; 010 2; 006 0; 011 2; 005 0; 012 2; ...
                  004 0; 013 2; 003 0; 014 2; 002 0; 015 2; 001 0; 016 2; ...
                  016 0; 001 1; 015 0; 002 1; 014 0; 003 1; 013 0; 004 1; ...
                  012 0; 005 1; 011 0; 006 1; 010 0; 007 1; 009 0; 008 1; ...
                  008 0; 009 1; 007 0; 010 1; 006 0; 011 1; 005 0; 012 1; ...
                  004 0; 013 1; 003 0; 014 1; 002 0; 015 1; 001 0; 016 1];

        muxLength = 16;

    case 'L22-8v'
        MuxMap = [016 5; 001 0; 015 5; 002 0; 014 5; 003 0; 013 5; 004 0; ...
                  012 5; 005 0; 011 5; 006 0; 010 5; 007 0; 009 5; 008 0; ...
                  008 5; 009 0; 007 5; 010 0; 006 5; 011 0; 005 5; 012 0; ...
                  004 5; 013 0; 003 5; 014 0; 002 5; 015 0; 001 5; 016 0; ...
                  016 6; 001 0; 015 6; 002 0; 014 6; 003 0; 013 6; 004 0; ...
                  012 6; 005 0; 011 6; 006 0; 010 6; 007 0; 009 6; 008 0; ...
                  008 6; 009 0; 007 6; 010 0; 006 6; 011 0; 005 6; 012 0; ...
                  004 6; 013 0; 003 6; 014 0; 002 6; 015 0; 001 6; 016 0; ...
                  016 7; 001 0; 015 7; 002 0; 014 7; 003 0; 013 7; 004 0; ...
                  012 7; 005 0; 011 7; 006 0; 010 7; 007 0; 009 7; 008 0; ...
                  008 7; 009 0; 007 7; 010 0; 006 7; 011 0; 005 7; 012 0; ...
                  004 7; 013 0; 003 7; 014 0; 002 7; 015 0; 001 7; 016 0; ...
                  016 8; 001 0; 015 8; 002 0; 014 8; 003 0; 013 8; 004 0; ...
                  012 8; 005 0; 011 8; 006 0; 010 8; 007 0; 009 8; 008 0; ...
                  008 8; 009 0; 007 8; 010 0; 006 8; 011 0; 005 8; 012 0; ...
                  004 8; 013 0; 003 8; 014 0; 002 8; 015 0; 001 8; 016 0; ...
                  016 0; 001 4; 015 0; 002 4; 014 0; 003 4; 013 0; 004 4; ...
                  012 0; 005 4; 011 0; 006 4; 010 0; 007 4; 009 0; 008 4; ...
                  008 0; 009 4; 007 0; 010 4; 006 0; 011 4; 005 0; 012 4; ...
                  004 0; 013 4; 003 0; 014 4; 002 0; 015 4; 001 0; 016 4; ...
                  016 0; 001 3; 015 0; 002 3; 014 0; 003 3; 013 0; 004 3; ...
                  012 0; 005 3; 011 0; 006 3; 010 0; 007 3; 009 0; 008 3; ...
                  008 0; 009 3; 007 0; 010 3; 006 0; 011 3; 005 0; 012 3; ...
                  004 0; 013 3; 003 0; 014 3; 002 0; 015 3; 001 0; 016 3; ...
                  016 0; 001 2; 015 0; 002 2; 014 0; 003 2; 013 0; 004 2; ...
                  012 0; 005 2; 011 0; 006 2; 010 0; 007 2; 009 0; 008 2; ...
                  008 0; 009 2; 007 0; 010 2; 006 0; 011 2; 005 0; 012 2; ...
                  004 0; 013 2; 003 0; 014 2; 002 0; 015 2; 001 0; 016 2; ...
                  016 0; 001 1; 015 0; 002 1; 014 0; 003 1; 013 0; 004 1; ...
                  012 0; 005 1; 011 0; 006 1; 010 0; 007 1; 009 0; 008 1; ...
                  008 0; 009 1; 007 0; 010 1; 006 0; 011 1; 005 0; 012 1; ...
                  004 0; 013 1; 003 0; 014 1; 002 0; 015 1; 001 0; 016 1];

        muxLength = 16;

    case 'L38-22v'
        MuxMap = [016 5; 001 0; 015 5; 002 0; 014 5; 003 0; 013 5; 004 0; ...
                  012 5; 005 0; 011 5; 006 0; 010 5; 007 0; 009 5; 008 0; ...
                  008 5; 009 0; 007 5; 010 0; 006 5; 011 0; 005 5; 012 0; ...
                  004 5; 013 0; 003 5; 014 0; 002 5; 015 0; 001 5; 016 0; ...
                  016 6; 001 0; 015 6; 002 0; 014 6; 003 0; 013 6; 004 0; ...
                  012 6; 005 0; 011 6; 006 0; 010 6; 007 0; 009 6; 008 0; ...
                  008 6; 009 0; 007 6; 010 0; 006 6; 011 0; 005 6; 012 0; ...
                  004 6; 013 0; 003 6; 014 0; 002 6; 015 0; 001 6; 016 0; ...
                  016 7; 001 0; 015 7; 002 0; 014 7; 003 0; 013 7; 004 0; ...
                  012 7; 005 0; 011 7; 006 0; 010 7; 007 0; 009 7; 008 0; ...
                  008 7; 009 0; 007 7; 010 0; 006 7; 011 0; 005 7; 012 0; ...
                  004 7; 013 0; 003 7; 014 0; 002 7; 015 0; 001 7; 016 0; ...
                  016 8; 001 0; 015 8; 002 0; 014 8; 003 0; 013 8; 004 0; ...
                  012 8; 005 0; 011 8; 006 0; 010 8; 007 0; 009 8; 008 0; ...
                  008 8; 009 0; 007 8; 010 0; 006 8; 011 0; 005 8; 012 0; ...
                  004 8; 013 0; 003 8; 014 0; 002 8; 015 0; 001 8; 016 0; ...
                  016 0; 001 4; 015 0; 002 4; 014 0; 003 4; 013 0; 004 4; ...
                  012 0; 005 4; 011 0; 006 4; 010 0; 007 4; 009 0; 008 4; ...
                  008 0; 009 4; 007 0; 010 4; 006 0; 011 4; 005 0; 012 4; ...
                  004 0; 013 4; 003 0; 014 4; 002 0; 015 4; 001 0; 016 4; ...
                  016 0; 001 3; 015 0; 002 3; 014 0; 003 3; 013 0; 004 3; ...
                  012 0; 005 3; 011 0; 006 3; 010 0; 007 3; 009 0; 008 3; ...
                  008 0; 009 3; 007 0; 010 3; 006 0; 011 3; 005 0; 012 3; ...
                  004 0; 013 3; 003 0; 014 3; 002 0; 015 3; 001 0; 016 3; ...
                  016 0; 001 2; 015 0; 002 2; 014 0; 003 2; 013 0; 004 2; ...
                  012 0; 005 2; 011 0; 006 2; 010 0; 007 2; 009 0; 008 2; ...
                  008 0; 009 2; 007 0; 010 2; 006 0; 011 2; 005 0; 012 2; ...
                  004 0; 013 2; 003 0; 014 2; 002 0; 015 2; 001 0; 016 2; ...
                  016 0; 001 1; 015 0; 002 1; 014 0; 003 1; 013 0; 004 1; ...
                  012 0; 005 1; 011 0; 006 1; 010 0; 007 1; 009 0; 008 1; ...
                  008 0; 009 1; 007 0; 010 1; 006 0; 011 1; 005 0; 012 1; ...
                  004 0; 013 1; 003 0; 014 1; 002 0; 015 1; 001 0; 016 1];

        muxLength = 16;

    case 'UTA260Mux'
        MuxMap = [016 1; 014 1; 012 1; 010 1; 008 1; 006 1; 004 1; 002 1; ...
                  016 2; 014 2; 012 2; 010 2; 008 2; 006 2; 004 2; 002 2; ...
                  016 3; 014 3; 012 3; 010 3; 008 3; 006 3; 004 3; 002 3; ...
                  016 4; 014 4; 012 4; 010 4; 008 4; 006 4; 004 4; 002 4; ...
                  016 5; 014 5; 012 5; 010 5; 008 5; 006 5; 004 5; 002 5; ...
                  016 6; 014 6; 012 6; 010 6; 008 6; 006 6; 004 6; 002 6; ...
                  016 7; 014 7; 012 7; 010 7; 008 7; 006 7; 004 7; 002 7; ...
                  016 8; 014 8; 012 8; 010 8; 008 8; 006 8; 004 8; 002 8; ...
                  015 1; 013 1; 011 1; 009 1; 007 1; 005 1; 003 1; 001 1; ...
                  015 2; 013 2; 011 2; 009 2; 007 2; 005 2; 003 2; 001 2; ...
                  015 3; 013 3; 011 3; 009 3; 007 3; 005 3; 003 3; 001 3; ...
                  015 4; 013 4; 011 4; 009 4; 007 4; 005 4; 003 4; 001 4; ...
                  015 5; 013 5; 011 5; 009 5; 007 5; 005 5; 003 5; 001 5; ...
                  015 6; 013 6; 011 6; 009 6; 007 6; 005 6; 003 6; 001 6; ...
                  015 7; 013 7; 011 7; 009 7; 007 7; 005 7; 003 7; 001 7; ...
                  015 8; 013 8; 011 8; 009 8; 007 8; 005 8; 003 8; 001 8];

        muxLength = 16;

    case 'UTA1024Mux'
        % This code is from the original "Apertures1024" function Marc and
        % Brian used to create the VDAS Aperture table; it is modified here
        % to produce the MuxMap table used in the 3.5.0 and later vantage
        % software releases, defining byte and bit to set in SHIAperture,
        % for each of the 1024 element signals
        MuxMap = zeros(1024, 2);
        for columnIdx=1:8
            for rowIdx=1:32
                for cableIdx=1:4
                    channel = rowIdx + 32*(columnIdx-1) + 256*(cableIdx-1);
                    patternNum = 1 + 4*(32-rowIdx) + (5-cableIdx);
                    MuxMap(channel, :) = [patternNum-1, columnIdx];
                end
            end
        end

        muxLength = 128;

    case 'SHI2048Mux'
        % V-512 system SHI with 4:1 mux switching for 2048 elements to 512
        % channels.  For now just a dummy map until we actually have a
        % hardware system.  
        MuxMap = zeros(2048, 2);
        
        for elgp = 1:256
            MuxMap(((1:8)+8*(elgp-1)), 1) = elgp;
            MuxMap(((1:8)+8*(elgp-1)), 2) = (1:8)';
        end

        muxLength = 256;

    otherwise
        error('getMuxMap: unrecognized probe name.');
end
